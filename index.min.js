"use strict";

function write(data, file) {
    return fs.writeFile(file, data, function(err) {
        return null !== err ? console.error(err) : null;
    });
}

function stream(data, res, header) {
    res.header("Content-Type", header), res.send(data);
}

function sitemap(options) {
    return new Sitemap(options);
}

function Sitemap(options) {
    var resolve = require("path").resolve, opt = options || Object.create(null), http = "https" == opt.http ? "https://" : "http://", url = String(opt.url || "127.0.0.1"), port = isNaN(opt.port) ? "" : ":" + Number(opt.port);
    this.my = {
        url: http + url + port,
        sitemap: String(opt.sitemap || "sitemap.xml"),
        robots: String(opt.robots || "robots.txt"),
        route: "object" == typeof opt.route ? opt.route : Object.create(null),
        cache: Number(opt.cache) || !1
    }, this.my.sitemap = resolve(this.my.sitemap), this.my.robots = resolve(this.my.robots), 
    this.map = "object" == typeof opt.map ? opt.map : Object.create(null), this._XMLwork = this.xml, 
    this._TXTwork = this.txt, opt.cache && (this.cache = {
        xml: {
            timestamp: 0
        },
        txt: {
            timestamp: 0
        }
    }, this._XMLwork = this._XMLcache, this._TXTwork = this._TXTcache), opt.generate && this.generate(opt.generate);
}

var fs = require("fs");

module.exports = sitemap, Sitemap.prototype.generate = function(app) {
    if (app && app._router) {
        if (app._router.stack) return this.generate4(app);
        if (app._router.map) return this.generate3(app);
    }
    throw new Error("missing express configuration");
}, Sitemap.prototype.generate4 = function(app) {
    for (var routing = app._router.stack, i = 0, ii = routing.length; ii > i; i++) {
        var route = routing[i].route;
        void 0 !== route && void 0 !== route.methods && void 0 !== route.methods.get && (this.map[route.path] = [ "get" ]);
    }
    return this.map;
}, Sitemap.prototype.generate3 = function(app) {
    for (var routing = app.routes.get, i = 0, ii = routing.length; ii > i; i++) {
        var route = routing[i];
        void 0 !== route && void 0 !== route.path && (this.map[route.path] = [ "get" ]);
    }
    return this.map;
}, Sitemap.prototype.tickle = function() {
    if (void 0 !== global.tickle && void 0 !== global.tickle.route) {
        for (var route in global.tickle.route) this.map[route] = [];
        return this.map;
    }
    return Object.create(null);
}, Sitemap.prototype.reset = function() {
    var r = Object.create(null);
    return this.map = r, this.my.cache && (this.cache = {
        xml: {
            timestamp: 0
        },
        txt: {
            timestamp: 0
        }
    }), r;
}, Sitemap.prototype.xml = function() {
    var route = this.my.route, sitemap = this.map, data = '<?xml version="1.0" encoding="UTF-8"?>';
    data += '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">';
    for (var uri in sitemap) {
        var rr = route.ALL || route[uri] || !1;
        rr && (rr.disallow || rr.hide) || (data += "<url><loc>" + this.my.url + uri + "</loc>", 
        "object" == typeof rr && (void 0 !== rr.lastmod && (data += "<lastmod>" + rr.lastmod + "</lastmod>"), 
        void 0 !== rr.changefreq && (data += "<changefreq>" + rr.changefreq + "</changefreq>"), 
        void 0 !== rr.priority && (data += "<priority>" + rr.priority + "</priority>")), 
        data += "</url>");
    }
    return data += "</urlset>";
}, Sitemap.prototype.txt = function() {
    var temp = !0, route = this.my.route, sitemap = this.map, data = "User-agent: *\n";
    for (var uri in sitemap) {
        var rr = route[uri];
        if (route.ALL && route.ALL.disallow && !route.ALL.hide) {
            temp = !1, data += "Disallow: /\n";
            break;
        }
        rr && rr.disallow && !rr.hide && (temp = !1, data += "Disallow: " + uri + "\n");
    }
    return temp && (data += "Disallow: \n"), data;
}, Sitemap.prototype.XMLtoFile = function() {
    return write(this._XMLwork(), this.my.sitemap);
}, Sitemap.prototype.TXTtoFile = function() {
    return write(this._TXTwork(), this.my.robots);
}, Sitemap.prototype.toFile = function() {
    write(this._XMLwork(), this.my.sitemap), write(this._TXTwork(), this.my.robots);
}, Sitemap.prototype.XMLtoWeb = function(res) {
    return stream(this._XMLwork(), res, "application/xml");
}, Sitemap.prototype.TXTtoWeb = function(res) {
    return stream(this._TXTwork(), res, "text/plain");
}, Sitemap.prototype._XMLcache = function() {
    if (this.cache.xml.timestamp - Date.now() > 0) return this.cache.xml.data;
    var data = this.xml();
    return this.cache.xml = {
        timestamp: Date.now() + this.my.cache,
        data: data
    }, data;
}, Sitemap.prototype._TXTcache = function() {
    if (this.cache.txt.timestamp - Date.now() > 0) return this.cache.txt.data;
    var data = this.txt();
    return this.cache.txt = {
        timestamp: Date.now() + this.my.cache,
        data: data
    }, data;
};
